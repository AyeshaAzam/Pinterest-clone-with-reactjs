[{"C:\\Dev\\Clever-Programmer\\All-Clones\\pinterest-clone\\pinterest-clone-app\\src\\reportWebVitals.js":"1","C:\\Dev\\Clever-Programmer\\All-Clones\\pinterest-clone\\pinterest-clone-app\\src\\App.js":"2","C:\\Dev\\Clever-Programmer\\All-Clones\\pinterest-clone\\pinterest-clone-app\\src\\Components\\Header.js":"3","C:\\Dev\\Clever-Programmer\\All-Clones\\pinterest-clone\\pinterest-clone-app\\src\\index.js":"4","C:\\Dev\\Clever-Programmer\\All-Clones\\pinterest-clone\\pinterest-clone-app\\src\\Components\\Mainboard.js":"5","C:\\Dev\\Clever-Programmer\\All-Clones\\pinterest-clone\\pinterest-clone-app\\src\\Components\\Pin.js":"6","C:\\Dev\\Clever-Programmer\\All-Clones\\pinterest-clone\\pinterest-clone-app\\src\\firebase.js":"7","C:\\Dev\\Clever-Programmer\\All-Clones\\pinterest-clone\\pinterest-clone-app\\src\\api\\unsplash.js":"8"},{"size":362,"mtime":1606241322532,"results":"9","hashOfConfig":"10"},{"size":3752,"mtime":1611234237817,"results":"11","hashOfConfig":"10"},{"size":2462,"mtime":1611141474766,"results":"12","hashOfConfig":"10"},{"size":500,"mtime":1606241322532,"results":"13","hashOfConfig":"10"},{"size":554,"mtime":1611181779780,"results":"14","hashOfConfig":"10"},{"size":604,"mtime":1611182001761,"results":"15","hashOfConfig":"10"},{"size":656,"mtime":1611099326620,"results":"16","hashOfConfig":"10"},{"size":346,"mtime":1611175221607,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1x0yvsb",{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"C:\\Dev\\Clever-Programmer\\All-Clones\\pinterest-clone\\pinterest-clone-app\\src\\reportWebVitals.js",[],["40","41"],"C:\\Dev\\Clever-Programmer\\All-Clones\\pinterest-clone\\pinterest-clone-app\\src\\App.js",["42","43","44","45"],"import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Components/Header\";\nimport Mainboard from \"./Components/Mainboard\";\nimport unsplash from \"./api/unsplash\";\nimport db from \"./firebase\";\n\n// https://www.pinterest.com\n// Unsplash Api : https://unsplash.com/developers\n// install: npm i firebase, then npm install -g firebase-tools\n// install : npm i axios\n// we need to get API-Key from unsplash.com (API developer)\n//Doc for Search :  https://unsplash.com/documentation#search-photos\n\n/*\nAxios\nApi call\nGet data from the form\nInput onChange event   --- useState\nApi call and render the Pins\n*/\n\n/*\nBecause that searchedPins - you want all of the pins in there right? But you’re dependent on the API call too \nso basically you collect them first, when all of the promises are resolved, that’s when you know you’ve got all the pins \nin your searchedPins-array. It has to do with understanding local/global scope \nand also useState as you want to use these pins throughout your whole component and not only within this function.\n*/\n\n/*\nIf I have Array and I use Push() what happens ?\nWhenever we push something in Array then it is pushed at the back of the array\nSo if I search term like : mongo then cars then oceans then i will get like this:\nmongo [{},{}, {}...10] cars [{},{}, {}...10] oceans[{},{}, {}...10]\n*/\n\nconst API_URL = \"https://api.unsplash.com/search/photos\";\n\nfunction App() {\n  const [newPins, setNewPins] = useState([]);\n\n  const MakeAPICALL = (term) => {\n    // Make an  API call\n    return unsplash.get(API_URL, {\n      params: { query: term },\n    });\n  };\n\n  const getNewPins = () => {\n    let promises = [];\n    let pinData = [];\n\n    db.collection(\"terms\").onSnapshot((snapshot) => {\n      let snapshotData = snapshot.docs;\n\n      console.log(\"e >>>> \", snapshotData);\n\n      if (snapshotData.length >= 10) {\n        //want to have 5 terms\n        snapshotData = snapshotData.slice(\n          snapshotData.length - 5,\n          snapshotData.length\n        );\n      }\n\n      snapshotData.map((doc) => {\n        promises.push(\n          MakeAPICALL(doc.data().term).then((res) => {\n            // via doc.data().term --- we call the db data\n            let results = res.data.results;\n            console.log(\">>>>\", res);\n            results.map((object) => {\n              pinData.push(object);\n            });\n\n            pinData.sort(function (a, b) {\n              return 0.5 - Math.random(); // it doesnot goes below Zero\n            });\n          })\n        );\n      });\n      Promise.all(promises).then(() => {\n        setNewPins(pinData);\n      });\n    });\n  };\n\n  useEffect(() => {\n    getNewPins(); // want to be upon previous search term ( previous search we did)\n  }, []);\n\n  const onSearchSubmit = (term) => {\n    console.log(\"this is from App() \", term);\n    let promises = [];\n    let searchedPins = [];\n    console.log(\"what is inside searchedPins\", searchedPins);\n    promises.push(\n      MakeAPICALL(term).then((res) => {\n        let results = res.data.results;\n        //console.log(\">>>>>\", results);\n        return results.map((pin) => {\n          //console.log(\"what is inside pin\", pin);\n          searchedPins.push(pin);\n          //console.log(\"what is inside searchedPins\", searchedPins);\n        });\n      })\n    );\n\n    Promise.all(promises).then(() => {\n      setNewPins(searchedPins);\n    });\n    //console.log(\"MakeAPICALL <<< \", MakeAPICALL(term));\n    //console.log(\"this is from App() \", term);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__header\">\n        <Header onSubmit={onSearchSubmit} />\n      </div>\n      <div className=\"app__body\">\n        <Mainboard pins={newPins} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Dev\\Clever-Programmer\\All-Clones\\pinterest-clone\\pinterest-clone-app\\src\\Components\\Header.js",["46","47"],"import React, { useState } from \"react\";\r\nimport \"./Header.css\";\r\nimport { Icon } from \"@material-ui/core\";\r\nimport PinterestIcon from \"@material-ui/icons/Pinterest\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport TextsmsIcon from \"@material-ui/icons/Textsms\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport db from \"../firebase\";\r\n\r\nfunction Header(props) {\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  console.log(\"what is input\", input);\r\n  console.log(\"what are props\", props);\r\n\r\n  const onSearchSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    props.onSubmit(input);\r\n    // add to the firebase, cloud firestore\r\n    db.collection(\"terms\").add({\r\n      term: input,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header__wrapper\">\r\n        <div className=\"header__logo\">\r\n          <PinterestIcon />\r\n        </div>\r\n        <div className=\"header__button homePage\">\r\n          <a href=\"/\">\r\n            {/* <HomeIcon /> */}\r\n            <p>HomePage</p>\r\n          </a>\r\n        </div>\r\n        <div className=\"header__button today\">\r\n          <a href=\"/\">\r\n            <p>Today</p>\r\n          </a>\r\n        </div>\r\n        <div className=\"header__button following\">\r\n          <a href=\"/\">\r\n            <p>Following</p>\r\n          </a>\r\n        </div>\r\n\r\n        <div className=\"header__search\">\r\n          <div className=\"header__searchContainer\">\r\n            <IconButton>\r\n              <SearchIcon />\r\n            </IconButton>\r\n\r\n            <form>\r\n              <input type=\"text\" onChange={(e) => setInput(e.target.value)} />\r\n              <button type=\"submit\" onClick={onSearchSubmit}>\r\n                Submit\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"header__menuItems\">\r\n          <IconButton>\r\n            <NotificationsIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <FaceIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <TextsmsIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <KeyboardArrowDownIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n",["48","49"],"C:\\Dev\\Clever-Programmer\\All-Clones\\pinterest-clone\\pinterest-clone-app\\src\\index.js",[],"C:\\Dev\\Clever-Programmer\\All-Clones\\pinterest-clone\\pinterest-clone-app\\src\\Components\\Mainboard.js",[],["50","51"],"C:\\Dev\\Clever-Programmer\\All-Clones\\pinterest-clone\\pinterest-clone-app\\src\\Components\\Pin.js",[],"C:\\Dev\\Clever-Programmer\\All-Clones\\pinterest-clone\\pinterest-clone-app\\src\\firebase.js",[],"C:\\Dev\\Clever-Programmer\\All-Clones\\pinterest-clone\\pinterest-clone-app\\src\\api\\unsplash.js",[],["52","53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":66,"column":30,"nodeType":"60","messageId":"61","endLine":66,"endColumn":32},{"ruleId":"58","severity":1,"message":"59","line":72,"column":34,"nodeType":"60","messageId":"61","endLine":72,"endColumn":36},{"ruleId":"62","severity":1,"message":"63","line":90,"column":6,"nodeType":"64","endLine":90,"endColumn":8,"suggestions":"65"},{"ruleId":"58","severity":1,"message":"59","line":101,"column":34,"nodeType":"60","messageId":"61","endLine":101,"endColumn":36},{"ruleId":"66","severity":1,"message":"67","line":3,"column":10,"nodeType":"68","messageId":"69","endLine":3,"endColumn":14},{"ruleId":"66","severity":1,"message":"70","line":5,"column":8,"nodeType":"68","messageId":"69","endLine":5,"endColumn":16},{"ruleId":"54","replacedBy":"71"},{"ruleId":"56","replacedBy":"72"},{"ruleId":"54","replacedBy":"73"},{"ruleId":"56","replacedBy":"74"},{"ruleId":"54","replacedBy":"75"},{"ruleId":"56","replacedBy":"76"},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getNewPins'. Either include it or remove the dependency array.","ArrayExpression",["79"],"no-unused-vars","'Icon' is defined but never used.","Identifier","unusedVar","'HomeIcon' is defined but never used.",["77"],["78"],["77"],["78"],["77"],["78"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [getNewPins]",{"range":"82","text":"83"},[2737,2739],"[getNewPins]"]